package com.springwithmysqldemo.sqlspringdemo.controller;

import com.springwithmysqldemo.sqlspringdemo.helper.ExcelFileuploadHelper;
import com.springwithmysqldemo.sqlspringdemo.helper.FileUploadHelper;
import com.springwithmysqldemo.sqlspringdemo.model.CustomerModel;
import com.springwithmysqldemo.sqlspringdemo.model.Employee;
import com.springwithmysqldemo.sqlspringdemo.repository.CustomerRepository;
import com.springwithmysqldemo.sqlspringdemo.service.EmployeeService;
import org.apache.commons.collections4.functors.ExceptionPredicate;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
//@RequestMapping(path="/customersql") // This means URL's start with /demo (after Application path)

@RestController // This means that this class is a Controller
//@RequestMapping(path="/customersql")
public class MainController{
     // This means to get the bean called cusRepository
    // Which is auto-generated by Spring, we will use it to handle the data
     CustomerRepository customerRepository;

    public MainController(CustomerRepository customerRepository) {
        this.customerRepository = customerRepository;
    }

    @PostMapping(path="/customer") // Map ONLY POST Requests
    public @ResponseBody String addNewUser (@RequestParam String name
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        CustomerModel cusmodel = new CustomerModel();
        cusmodel.setName(name);
        cusmodel.setEmail(email);
        customerRepository.save(cusmodel);
        return "Saved";
    }

    @GetMapping(path="/customer")
    public List<CustomerModel> getAllUsers() {
        // This returns a JSON or XML with the users
        return (List<CustomerModel>) customerRepository.findAll();
    }

    /* File controller REST API*/
    @Autowired
    private FileUploadHelper fileUploadHelper;

    public ResponseEntity<String> upload(@RequestParam("file")MultipartFile file){
        System.out.println(file.getOriginalFilename());
        System.out.println(file.getSize()); //returns in bytes
        System.out.println(file.getContentType());
        System.out.println(file.getName());
        try {
            //validation
            if (file.isEmpty()) {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("File not found");
            }
            //validation
            if (!file.getContentType().equals("application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")) {
                return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("only excel sheet file are allowed");
            }
            //upload file now
            //requirements :
            // 1.where to upload file on server i.e. upload dir now dir cn be outside project and inside project also
            boolean uploadsuccess=fileUploadHelper.uploadFile(file);
            if(uploadsuccess){
                //return ResponseEntity.ok("File is successfully uploaded");
                return ResponseEntity.ok(ServletUriComponentsBuilder.fromCurrentContextPath().path("/employeeData/").path(file.getOriginalFilename()).toUriString());
                //http://localhost:8080/employeeData/EmployeeData.xlsx  hitt this on browser and yu will get employeeData
            }
        }
        catch(Exception e){
            e.printStackTrace();
        }


        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("Something went wrong, try again!");
    }
    @Autowired
    private ExcelFileuploadHelper excelFileuploadHelper;
    List<Employee> employeeList;
    @Autowired
    EmployeeService employeeService;
    @PostMapping("/upload-file-store")
    public ResponseEntity<String> uploadAndStore(@RequestParam("file")MultipartFile file) {
        System.out.println(file.getOriginalFilename());
        System.out.println(file.getSize()); //returns in bytes
        System.out.println(file.getContentType());
        System.out.println(file.getName());
        //save in database
        employeeList=excelFileuploadHelper.excelToList(file);
        employeeService.save(employeeList);
        System.out.println("employeeList.size : " +employeeList.size());
        return ResponseEntity.ok("working fine::");
    }
    @GetMapping("/get-employees")
    public ResponseEntity<List<Employee>> getAllEmployee(){
        try {
            List<Employee> employeeList = employeeService.getAllEmployee();
            if (employeeList.isEmpty()) {
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            }
            return new ResponseEntity<>(employeeList, HttpStatus.OK);
        }
        catch(Exception e){
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }




}
